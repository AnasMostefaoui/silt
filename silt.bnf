id ::= <a group of non-space unicode characters>

# Declarations

decl ::= <data-decl>
       | <record-decl>
       | <module-decl>
       | <import-decl>
       | <function-decl>

## Data types

data-decl ::= 'data' <id> <type-parameter-list>? <type-indices>? 'where' <constructor-list>
type-indices ::= ':' <expr>
type-parameter-list ::= <type-parameter>
                      | <type-parameter> <type-parameter-list>
ascription ::= <id> ':' <expr>
type-parameter ::= '(' <ascription> ')'
constructor-list ::= <constructor-decl>
                   | <constructor-decl> <constructor-decl-list>
constructor-decl ::= '|' <ascription>

## Records

record-decl ::= 'record' <id> <type-parameter-list>? <type-indices>? 'where' <record-element-list>?
record-element-list ::= <record-element>
                      | <record-element> <record-element-list>
record-element ::= <field-decl>
                 | <function-decl>
field-decl ::= 'field' <ascription>

## Modules

module-decl ::= 'module' <id> <type-parameter-list>? 'where' <decl-list>
decl-list ::= <decl>
            | <decl> <decl-list>
            
## Imports

qualified-name ::= <id> | <id> '.' <qualified-name>
import-decl ::= 'open'? 'import' <qualified-name>

## Functions

# TODO: Generalize to operators as well.
function-decl ::= <ascription> <function-clause-list>
function-clause-list ::= <function-clause>
                       | <function-clause> <function-clause-list>
function-clause ::= <id> <pattern-clause-list> '=' <expr>

# Patterns
